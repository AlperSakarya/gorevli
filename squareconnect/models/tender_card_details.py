# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class TenderCardDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, card=None, entry_method=None):
        """
        TenderCardDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'card': 'Card',
            'entry_method': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'card': 'card',
            'entry_method': 'entry_method'
        }

        self._status = status
        self._card = card
        self._entry_method = entry_method

    @property
    def status(self):
        """
        Gets the status of this TenderCardDetails.
        The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.

        :return: The status of this TenderCardDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TenderCardDetails.
        The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.

        :param status: The status of this TenderCardDetails.
        :type: str
        """

        self._status = status

    @property
    def card(self):
        """
        Gets the card of this TenderCardDetails.
        The credit card's non-confidential details.

        :return: The card of this TenderCardDetails.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """
        Sets the card of this TenderCardDetails.
        The credit card's non-confidential details.

        :param card: The card of this TenderCardDetails.
        :type: Card
        """

        self._card = card

    @property
    def entry_method(self):
        """
        Gets the entry_method of this TenderCardDetails.
        The method used to enter the card's details for the transaction.

        :return: The entry_method of this TenderCardDetails.
        :rtype: str
        """
        return self._entry_method

    @entry_method.setter
    def entry_method(self, entry_method):
        """
        Sets the entry_method of this TenderCardDetails.
        The method used to enter the card's details for the transaction.

        :param entry_method: The entry_method of this TenderCardDetails.
        :type: str
        """

        self._entry_method = entry_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
