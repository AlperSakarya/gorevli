# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class Error(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, category=None, code=None, detail=None, field=None):
        """
        Error - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category': 'str',
            'code': 'str',
            'detail': 'str',
            'field': 'str'
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'detail': 'detail',
            'field': 'field'
        }

        self._category = category
        self._code = code
        self._detail = detail
        self._field = field

    @property
    def category(self):
        """
        Gets the category of this Error.
        The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Error.
        The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.

        :param category: The category of this Error.
        :type: str
        """

        self._category = category

    @property
    def code(self):
        """
        Gets the code of this Error.
        The error's specific code. See [ErrorCode](#type-errorcode) for possible values

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Error.
        The error's specific code. See [ErrorCode](#type-errorcode) for possible values

        :param code: The code of this Error.
        :type: str
        """

        self._code = code

    @property
    def detail(self):
        """
        Gets the detail of this Error.
        A human-readable description of the error for debugging purposes.

        :return: The detail of this Error.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this Error.
        A human-readable description of the error for debugging purposes.

        :param detail: The detail of this Error.
        :type: str
        """

        self._detail = detail

    @property
    def field(self):
        """
        Gets the field of this Error.
        The name of the field provided in the original request that the error pertains to, if any.

        :return: The field of this Error.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this Error.
        The name of the field provided in the original request that the error pertains to, if any.

        :param field: The field of this Error.
        :type: str
        """

        self._field = field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
