# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1CreateRefundRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, payment_id=None, type=None, reason=None, refunded_money=None, request_idempotence_key=None):
        """
        V1CreateRefundRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'payment_id': 'str',
            'type': 'str',
            'reason': 'str',
            'refunded_money': 'V1Money',
            'request_idempotence_key': 'str'
        }

        self.attribute_map = {
            'payment_id': 'payment_id',
            'type': 'type',
            'reason': 'reason',
            'refunded_money': 'refunded_money',
            'request_idempotence_key': 'request_idempotence_key'
        }

        self._payment_id = payment_id
        self._type = type
        self._reason = reason
        self._refunded_money = refunded_money
        self._request_idempotence_key = request_idempotence_key

    @property
    def payment_id(self):
        """
        Gets the payment_id of this V1CreateRefundRequest.
        The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.

        :return: The payment_id of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """
        Sets the payment_id of this V1CreateRefundRequest.
        The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.

        :param payment_id: The payment_id of this V1CreateRefundRequest.
        :type: str
        """

        self._payment_id = payment_id

    @property
    def type(self):
        """
        Gets the type of this V1CreateRefundRequest.
        TThe type of refund (FULL or PARTIAL).

        :return: The type of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1CreateRefundRequest.
        TThe type of refund (FULL or PARTIAL).

        :param type: The type of this V1CreateRefundRequest.
        :type: str
        """

        self._type = type

    @property
    def reason(self):
        """
        Gets the reason of this V1CreateRefundRequest.
        The reason for the refund.

        :return: The reason of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this V1CreateRefundRequest.
        The reason for the refund.

        :param reason: The reason of this V1CreateRefundRequest.
        :type: str
        """

        self._reason = reason

    @property
    def refunded_money(self):
        """
        Gets the refunded_money of this V1CreateRefundRequest.
        The amount of money to refund. Required only for PARTIAL refunds.

        :return: The refunded_money of this V1CreateRefundRequest.
        :rtype: V1Money
        """
        return self._refunded_money

    @refunded_money.setter
    def refunded_money(self, refunded_money):
        """
        Sets the refunded_money of this V1CreateRefundRequest.
        The amount of money to refund. Required only for PARTIAL refunds.

        :param refunded_money: The refunded_money of this V1CreateRefundRequest.
        :type: V1Money
        """

        self._refunded_money = refunded_money

    @property
    def request_idempotence_key(self):
        """
        Gets the request_idempotence_key of this V1CreateRefundRequest.
        An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.

        :return: The request_idempotence_key of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._request_idempotence_key

    @request_idempotence_key.setter
    def request_idempotence_key(self, request_idempotence_key):
        """
        Sets the request_idempotence_key of this V1CreateRefundRequest.
        An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.

        :param request_idempotence_key: The request_idempotence_key of this V1CreateRefundRequest.
        :type: str
        """

        self._request_idempotence_key = request_idempotence_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
