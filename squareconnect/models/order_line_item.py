# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class OrderLineItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, quantity=None, taxes=None, discounts=None, base_price_money=None, total_tax_money=None, total_discount_money=None, total_money=None):
        """
        OrderLineItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'quantity': 'str',
            'taxes': 'list[OrderLineItemTax]',
            'discounts': 'list[OrderLineItemDiscount]',
            'base_price_money': 'Money',
            'total_tax_money': 'Money',
            'total_discount_money': 'Money',
            'total_money': 'Money'
        }

        self.attribute_map = {
            'name': 'name',
            'quantity': 'quantity',
            'taxes': 'taxes',
            'discounts': 'discounts',
            'base_price_money': 'base_price_money',
            'total_tax_money': 'total_tax_money',
            'total_discount_money': 'total_discount_money',
            'total_money': 'total_money'
        }

        self._name = name
        self._quantity = quantity
        self._taxes = taxes
        self._discounts = discounts
        self._base_price_money = base_price_money
        self._total_tax_money = total_tax_money
        self._total_discount_money = total_discount_money
        self._total_money = total_money

    @property
    def name(self):
        """
        Gets the name of this OrderLineItem.
        The name of the line item.

        :return: The name of this OrderLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrderLineItem.
        The name of the line item.

        :param name: The name of this OrderLineItem.
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """
        Gets the quantity of this OrderLineItem.
        The quantity of the product to purchase. Currently, this string must have an integer value.

        :return: The quantity of this OrderLineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this OrderLineItem.
        The quantity of the product to purchase. Currently, this string must have an integer value.

        :param quantity: The quantity of this OrderLineItem.
        :type: str
        """

        self._quantity = quantity

    @property
    def taxes(self):
        """
        Gets the taxes of this OrderLineItem.
        The taxes applied to this line item.

        :return: The taxes of this OrderLineItem.
        :rtype: list[OrderLineItemTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this OrderLineItem.
        The taxes applied to this line item.

        :param taxes: The taxes of this OrderLineItem.
        :type: list[OrderLineItemTax]
        """

        self._taxes = taxes

    @property
    def discounts(self):
        """
        Gets the discounts of this OrderLineItem.
        The discounts applied to this line item.

        :return: The discounts of this OrderLineItem.
        :rtype: list[OrderLineItemDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """
        Sets the discounts of this OrderLineItem.
        The discounts applied to this line item.

        :param discounts: The discounts of this OrderLineItem.
        :type: list[OrderLineItemDiscount]
        """

        self._discounts = discounts

    @property
    def base_price_money(self):
        """
        Gets the base_price_money of this OrderLineItem.
        The base price for a single unit of the line item.

        :return: The base_price_money of this OrderLineItem.
        :rtype: Money
        """
        return self._base_price_money

    @base_price_money.setter
    def base_price_money(self, base_price_money):
        """
        Sets the base_price_money of this OrderLineItem.
        The base price for a single unit of the line item.

        :param base_price_money: The base_price_money of this OrderLineItem.
        :type: Money
        """

        self._base_price_money = base_price_money

    @property
    def total_tax_money(self):
        """
        Gets the total_tax_money of this OrderLineItem.
        The total tax amount of money to collect for the line item.

        :return: The total_tax_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """
        Sets the total_tax_money of this OrderLineItem.
        The total tax amount of money to collect for the line item.

        :param total_tax_money: The total_tax_money of this OrderLineItem.
        :type: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def total_discount_money(self):
        """
        Gets the total_discount_money of this OrderLineItem.
        The total discount amount of money to collect for the line item.

        :return: The total_discount_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_discount_money

    @total_discount_money.setter
    def total_discount_money(self, total_discount_money):
        """
        Sets the total_discount_money of this OrderLineItem.
        The total discount amount of money to collect for the line item.

        :param total_discount_money: The total_discount_money of this OrderLineItem.
        :type: Money
        """

        self._total_discount_money = total_discount_money

    @property
    def total_money(self):
        """
        Gets the total_money of this OrderLineItem.
        The total amount of money to collect for this line item.

        :return: The total_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """
        Sets the total_money of this OrderLineItem.
        The total amount of money to collect for this line item.

        :param total_money: The total_money of this OrderLineItem.
        :type: Money
        """

        self._total_money = total_money

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
