# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1PaymentDiscount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, applied_money=None, discount_id=None):
        """
        V1PaymentDiscount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'applied_money': 'V1Money',
            'discount_id': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'applied_money': 'applied_money',
            'discount_id': 'discount_id'
        }

        self._name = name
        self._applied_money = applied_money
        self._discount_id = discount_id

    @property
    def name(self):
        """
        Gets the name of this V1PaymentDiscount.
        The discount's name.

        :return: The name of this V1PaymentDiscount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1PaymentDiscount.
        The discount's name.

        :param name: The name of this V1PaymentDiscount.
        :type: str
        """

        self._name = name

    @property
    def applied_money(self):
        """
        Gets the applied_money of this V1PaymentDiscount.
        The amount of money that this discount adds to the payment (note that this value is always negative or zero).

        :return: The applied_money of this V1PaymentDiscount.
        :rtype: V1Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """
        Sets the applied_money of this V1PaymentDiscount.
        The amount of money that this discount adds to the payment (note that this value is always negative or zero).

        :param applied_money: The applied_money of this V1PaymentDiscount.
        :type: V1Money
        """

        self._applied_money = applied_money

    @property
    def discount_id(self):
        """
        Gets the discount_id of this V1PaymentDiscount.
        The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.

        :return: The discount_id of this V1PaymentDiscount.
        :rtype: str
        """
        return self._discount_id

    @discount_id.setter
    def discount_id(self, discount_id):
        """
        Sets the discount_id of this V1PaymentDiscount.
        The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.

        :param discount_id: The discount_id of this V1PaymentDiscount.
        :type: str
        """

        self._discount_id = discount_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
