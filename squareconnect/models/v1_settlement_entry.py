# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1SettlementEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, payment_id=None, type=None, amount_money=None, fee_money=None):
        """
        V1SettlementEntry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'payment_id': 'str',
            'type': 'str',
            'amount_money': 'V1Money',
            'fee_money': 'V1Money'
        }

        self.attribute_map = {
            'payment_id': 'payment_id',
            'type': 'type',
            'amount_money': 'amount_money',
            'fee_money': 'fee_money'
        }

        self._payment_id = payment_id
        self._type = type
        self._amount_money = amount_money
        self._fee_money = fee_money

    @property
    def payment_id(self):
        """
        Gets the payment_id of this V1SettlementEntry.
        The settlement's unique identifier.

        :return: The payment_id of this V1SettlementEntry.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """
        Sets the payment_id of this V1SettlementEntry.
        The settlement's unique identifier.

        :param payment_id: The payment_id of this V1SettlementEntry.
        :type: str
        """

        self._payment_id = payment_id

    @property
    def type(self):
        """
        Gets the type of this V1SettlementEntry.
        The settlement's current status.

        :return: The type of this V1SettlementEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1SettlementEntry.
        The settlement's current status.

        :param type: The type of this V1SettlementEntry.
        :type: str
        """

        self._type = type

    @property
    def amount_money(self):
        """
        Gets the amount_money of this V1SettlementEntry.
        The total amount of money this entry contributes to the total settlement amount.

        :return: The amount_money of this V1SettlementEntry.
        :rtype: V1Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """
        Sets the amount_money of this V1SettlementEntry.
        The total amount of money this entry contributes to the total settlement amount.

        :param amount_money: The amount_money of this V1SettlementEntry.
        :type: V1Money
        """

        self._amount_money = amount_money

    @property
    def fee_money(self):
        """
        Gets the fee_money of this V1SettlementEntry.
        The amount of all Square fees associated with this settlement entry. This value is always negative or zero.

        :return: The fee_money of this V1SettlementEntry.
        :rtype: V1Money
        """
        return self._fee_money

    @fee_money.setter
    def fee_money(self, fee_money):
        """
        Sets the fee_money of this V1SettlementEntry.
        The amount of all Square fees associated with this settlement entry. This value is always negative or zero.

        :param fee_money: The fee_money of this V1SettlementEntry.
        :type: V1Money
        """

        self._fee_money = fee_money

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
