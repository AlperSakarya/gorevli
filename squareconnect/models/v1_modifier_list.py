# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1ModifierList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, selection_type=None, modifier_options=None):
        """
        V1ModifierList - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'selection_type': 'str',
            'modifier_options': 'list[V1ModifierOption]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'selection_type': 'selection_type',
            'modifier_options': 'modifier_options'
        }

        self._id = id
        self._name = name
        self._selection_type = selection_type
        self._modifier_options = modifier_options

    @property
    def id(self):
        """
        Gets the id of this V1ModifierList.
        The modifier list's unique ID.

        :return: The id of this V1ModifierList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this V1ModifierList.
        The modifier list's unique ID.

        :param id: The id of this V1ModifierList.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this V1ModifierList.
        The modifier list's name.

        :return: The name of this V1ModifierList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1ModifierList.
        The modifier list's name.

        :param name: The name of this V1ModifierList.
        :type: str
        """

        self._name = name

    @property
    def selection_type(self):
        """
        Gets the selection_type of this V1ModifierList.
        Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.

        :return: The selection_type of this V1ModifierList.
        :rtype: str
        """
        return self._selection_type

    @selection_type.setter
    def selection_type(self, selection_type):
        """
        Sets the selection_type of this V1ModifierList.
        Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.

        :param selection_type: The selection_type of this V1ModifierList.
        :type: str
        """

        self._selection_type = selection_type

    @property
    def modifier_options(self):
        """
        Gets the modifier_options of this V1ModifierList.
        The options included in the modifier list.

        :return: The modifier_options of this V1ModifierList.
        :rtype: list[V1ModifierOption]
        """
        return self._modifier_options

    @modifier_options.setter
    def modifier_options(self, modifier_options):
        """
        Sets the modifier_options of this V1ModifierList.
        The options included in the modifier list.

        :param modifier_options: The modifier_options of this V1ModifierList.
        :type: list[V1ModifierOption]
        """

        self._modifier_options = modifier_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
