# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1AdjustInventoryRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, quantity_delta=None, adjustment_type=None, memo=None):
        """
        V1AdjustInventoryRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'quantity_delta': 'float',
            'adjustment_type': 'float',
            'memo': 'str'
        }

        self.attribute_map = {
            'quantity_delta': 'quantity_delta',
            'adjustment_type': 'adjustment_type',
            'memo': 'memo'
        }

        self._quantity_delta = quantity_delta
        self._adjustment_type = adjustment_type
        self._memo = memo

    @property
    def quantity_delta(self):
        """
        Gets the quantity_delta of this V1AdjustInventoryRequest.
        The number to adjust the variation's quantity by.

        :return: The quantity_delta of this V1AdjustInventoryRequest.
        :rtype: float
        """
        return self._quantity_delta

    @quantity_delta.setter
    def quantity_delta(self, quantity_delta):
        """
        Sets the quantity_delta of this V1AdjustInventoryRequest.
        The number to adjust the variation's quantity by.

        :param quantity_delta: The quantity_delta of this V1AdjustInventoryRequest.
        :type: float
        """

        self._quantity_delta = quantity_delta

    @property
    def adjustment_type(self):
        """
        Gets the adjustment_type of this V1AdjustInventoryRequest.
        The reason for the inventory adjustment.

        :return: The adjustment_type of this V1AdjustInventoryRequest.
        :rtype: float
        """
        return self._adjustment_type

    @adjustment_type.setter
    def adjustment_type(self, adjustment_type):
        """
        Sets the adjustment_type of this V1AdjustInventoryRequest.
        The reason for the inventory adjustment.

        :param adjustment_type: The adjustment_type of this V1AdjustInventoryRequest.
        :type: float
        """

        self._adjustment_type = adjustment_type

    @property
    def memo(self):
        """
        Gets the memo of this V1AdjustInventoryRequest.
        A note about the inventory adjustment.

        :return: The memo of this V1AdjustInventoryRequest.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """
        Sets the memo of this V1AdjustInventoryRequest.
        A note about the inventory adjustment.

        :param memo: The memo of this V1AdjustInventoryRequest.
        :type: str
        """

        self._memo = memo

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
