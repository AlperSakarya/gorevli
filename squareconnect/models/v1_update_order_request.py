# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1UpdateOrderRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, action=None, shipped_tracking_number=None, completed_note=None, refunded_note=None, canceled_note=None):
        """
        V1UpdateOrderRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'shipped_tracking_number': 'str',
            'completed_note': 'str',
            'refunded_note': 'str',
            'canceled_note': 'str'
        }

        self.attribute_map = {
            'action': 'action',
            'shipped_tracking_number': 'shipped_tracking_number',
            'completed_note': 'completed_note',
            'refunded_note': 'refunded_note',
            'canceled_note': 'canceled_note'
        }

        self._action = action
        self._shipped_tracking_number = shipped_tracking_number
        self._completed_note = completed_note
        self._refunded_note = refunded_note
        self._canceled_note = canceled_note

    @property
    def action(self):
        """
        Gets the action of this V1UpdateOrderRequest.
        The action to perform on the order (COMPLETE, CANCEL, or REFUND).

        :return: The action of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this V1UpdateOrderRequest.
        The action to perform on the order (COMPLETE, CANCEL, or REFUND).

        :param action: The action of this V1UpdateOrderRequest.
        :type: str
        """

        self._action = action

    @property
    def shipped_tracking_number(self):
        """
        Gets the shipped_tracking_number of this V1UpdateOrderRequest.
        The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.

        :return: The shipped_tracking_number of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._shipped_tracking_number

    @shipped_tracking_number.setter
    def shipped_tracking_number(self, shipped_tracking_number):
        """
        Sets the shipped_tracking_number of this V1UpdateOrderRequest.
        The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.

        :param shipped_tracking_number: The shipped_tracking_number of this V1UpdateOrderRequest.
        :type: str
        """

        self._shipped_tracking_number = shipped_tracking_number

    @property
    def completed_note(self):
        """
        Gets the completed_note of this V1UpdateOrderRequest.
        A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.

        :return: The completed_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._completed_note

    @completed_note.setter
    def completed_note(self, completed_note):
        """
        Sets the completed_note of this V1UpdateOrderRequest.
        A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.

        :param completed_note: The completed_note of this V1UpdateOrderRequest.
        :type: str
        """

        self._completed_note = completed_note

    @property
    def refunded_note(self):
        """
        Gets the refunded_note of this V1UpdateOrderRequest.
        A merchant-specified note about the refunding of the order. Only valid if action is REFUND.

        :return: The refunded_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._refunded_note

    @refunded_note.setter
    def refunded_note(self, refunded_note):
        """
        Sets the refunded_note of this V1UpdateOrderRequest.
        A merchant-specified note about the refunding of the order. Only valid if action is REFUND.

        :param refunded_note: The refunded_note of this V1UpdateOrderRequest.
        :type: str
        """

        self._refunded_note = refunded_note

    @property
    def canceled_note(self):
        """
        Gets the canceled_note of this V1UpdateOrderRequest.
        A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.

        :return: The canceled_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._canceled_note

    @canceled_note.setter
    def canceled_note(self, canceled_note):
        """
        Sets the canceled_note of this V1UpdateOrderRequest.
        A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.

        :param canceled_note: The canceled_note of this V1UpdateOrderRequest.
        :type: str
        """

        self._canceled_note = canceled_note

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
