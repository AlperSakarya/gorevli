# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class TenderCashDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, buyer_tendered_money=None, change_back_money=None):
        """
        TenderCashDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'buyer_tendered_money': 'Money',
            'change_back_money': 'Money'
        }

        self.attribute_map = {
            'buyer_tendered_money': 'buyer_tendered_money',
            'change_back_money': 'change_back_money'
        }

        self._buyer_tendered_money = buyer_tendered_money
        self._change_back_money = change_back_money

    @property
    def buyer_tendered_money(self):
        """
        Gets the buyer_tendered_money of this TenderCashDetails.
        The total amount of cash provided by the buyer, before change is given.

        :return: The buyer_tendered_money of this TenderCashDetails.
        :rtype: Money
        """
        return self._buyer_tendered_money

    @buyer_tendered_money.setter
    def buyer_tendered_money(self, buyer_tendered_money):
        """
        Sets the buyer_tendered_money of this TenderCashDetails.
        The total amount of cash provided by the buyer, before change is given.

        :param buyer_tendered_money: The buyer_tendered_money of this TenderCashDetails.
        :type: Money
        """

        self._buyer_tendered_money = buyer_tendered_money

    @property
    def change_back_money(self):
        """
        Gets the change_back_money of this TenderCashDetails.
        The amount of change returned to the buyer.

        :return: The change_back_money of this TenderCashDetails.
        :rtype: Money
        """
        return self._change_back_money

    @change_back_money.setter
    def change_back_money(self, change_back_money):
        """
        Sets the change_back_money of this TenderCashDetails.
        The amount of change returned to the buyer.

        :param change_back_money: The change_back_money of this TenderCashDetails.
        :type: Money
        """

        self._change_back_money = change_back_money

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
